from __future__ import annotations

import re
import sys
from io import BytesIO
from pathlib import Path

import pandas as pd
import streamlit as st
from streamlit.delta_generator import DeltaGenerator

ROOT_DIR = Path(__file__).resolve().parent
SRC_DIR = ROOT_DIR / "src"
if SRC_DIR.exists():
    sys.path.insert(0, str(SRC_DIR))

from zp_calculator.data_processing import (
    aggregate_by_partner_and_buyer,
    aggregate_expenses_by_buyer,
    aggregate_expenses_totals,
    aggregate_overall,
    load_expenses_file,
    load_reconciliation_file,
    load_spend_sheet,
    load_spend_workbook,
)


def create_download_button(label: str, df: pd.DataFrame, filename: str) -> None:
    csv_buffer = BytesIO()
    df.to_csv(csv_buffer, index=False, encoding="utf-8-sig")
    csv_buffer.seek(0)
    st.download_button(
        label=label,
        data=csv_buffer,
        file_name=filename,
        mime="text/csv",
    )


def append_total_row(df: pd.DataFrame, label: str, numeric_columns: list[str]) -> pd.DataFrame:
    if df.empty:
        return df

    total = {column: df[column].sum() if column in numeric_columns else "" for column in df.columns}
    first_column = df.columns[0]
    total[first_column] = label
    total_df = pd.DataFrame([total])
    # Preserve integer formatting for count columns when possible
    for column in numeric_columns:
        if column in df.columns and pd.api.types.is_integer_dtype(df[column]):
            total_df[column] = total_df[column].astype(int)
    return pd.concat([df, total_df], ignore_index=True)


def resolve_rate(value: str | None, rates: dict[str, float]) -> float:
    if value is None:
        return 1.0
    normalized = str(value).strip().upper()
    if not normalized or normalized == "NAN":
        return 1.0
    return rates.get(normalized, 1.0)


PARTNER_SUFFIX_PATTERN = re.compile(r"\s*-\s*—Å–≤–æ–¥–Ω[–∞a][^$]*$", re.IGNORECASE)


def infer_partner_program(filename: str) -> str:
    stem = Path(filename).stem
    cleaned = PARTNER_SUFFIX_PATTERN.sub("", stem)
    cleaned = cleaned.strip()
    return cleaned or stem.strip()


def render_reconciliation_module(sidebar: DeltaGenerator) -> None:
    st.subheader("üßæ –°–≤–æ–¥–Ω–∞—è –ø–æ –±–∞–π–µ—Ä–∞–º –∏–∑ —Ñ–∞–π–ª–æ–≤ —Å–≤–µ—Ä–æ–∫")
    st.caption(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ CSV- –∏–ª–∏ XLSX-—Ñ–∞–π–ª–æ–≤ —Å–≤–µ—Ä–æ–∫ (–≤ Excel —á–∏—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ –±–∞–π–µ—Ä–∞–º."
    )

    uploaded_files = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ XLSX",
        type=["csv", "xlsx"],
        accept_multiple_files=True,
        key="reconciliation_files",
    )

    if not uploaded_files:
        st.info("–î–æ–±–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
        return

    all_details: list[pd.DataFrame] = []
    errors: list[str] = []

    for uploaded in uploaded_files:
        partner_program = infer_partner_program(uploaded.name)
        try:
            details = load_reconciliation_file(uploaded, partner_program, source_name=uploaded.name)
        except Exception as exc:  # pragma: no cover - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            errors.append(f"{uploaded.name}: {exc}")
            continue

        if details.empty:
            errors.append(f"{uploaded.name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ")
            continue

        all_details.append(details)

    if errors:
        st.warning("\n".join(errors))

    if not all_details:
        st.error("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")
        return

    combined_details = pd.concat(all_details, ignore_index=True)
    combined_details["partner_program"] = combined_details["partner_program"].astype(str)
    combined_details["buyer"] = combined_details["buyer"].astype(str)
    combined_details["currency"] = (
        combined_details["currency"].fillna("USD").replace("", "USD").astype(str).str.upper()
    )

    available_currencies = sorted(
        {
            currency
            for currency in combined_details["currency"].unique()
            if isinstance(currency, str) and currency and currency != "NAN"
        }
    )
    if not available_currencies:
        available_currencies = ["USD"]

    sidebar.subheader("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç ‚Üí $")
    sidebar.caption("–í–≤–µ–¥–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–ª–∞—Ä–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 1 –µ–¥–∏–Ω–∏—Ü–µ –≤–∞–ª—é—Ç—ã –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
    exchange_rates: dict[str, float] = {}
    for currency in available_currencies:
        exchange_rates[currency] = sidebar.number_input(
            f"{currency} ‚Üí USD",
            min_value=0.0,
            value=1.0,
            step=0.01,
            format="%.4f",
            key=f"rate_{currency}",
        )

    exchange_rates.setdefault("USD", 1.0)

    partner_options = sorted(combined_details["partner_program"].unique())
    selected_programs = st.multiselect(
        "–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
        options=partner_options,
        default=partner_options,
    )
    filtered_details = combined_details[combined_details["partner_program"].isin(selected_programs)]

    buyer_options = sorted(filtered_details["buyer"].unique())
    selected_buyers = st.multiselect(
        "–ë–∞–π–µ—Ä—ã",
        options=buyer_options,
        default=buyer_options,
    )
    filtered_details = filtered_details[filtered_details["buyer"].isin(selected_buyers)]

    if filtered_details.empty:
        st.warning("–ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    st.subheader("–î–µ—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏")
    st.dataframe(
        filtered_details[
            [
                "partner_program",
                "buyer",
                "commission_type",
                "ftd_count",
                "payout",
                "currency",
                "is_chargeback",
                "source_file",
            ]
        ]
    )

    summary = aggregate_by_partner_and_buyer(filtered_details)
    summary["currency"] = summary["currency"].fillna("USD").replace("", "USD").str.upper()
    summary["conversion_rate"] = summary["currency"].apply(lambda cur: resolve_rate(cur, exchange_rates))
    summary["payout_usd"] = (summary["payout"] * summary["conversion_rate"]).round(2)
    summary["chargeback_amount_usd"] = (
        summary["chargeback_amount"] * summary["conversion_rate"]
    ).round(2)
    summary["net_payout_usd"] = (summary["net_payout"] * summary["conversion_rate"]).round(2)

    st.subheader("–°–≤–æ–¥–∫–∞ –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –∏ –±–∞–π–µ—Ä–∞–º")
    st.dataframe(
        summary[
            [
                "partner_program",
                "buyer",
                "deposits",
                "chargebacks",
                "net_deposits",
                "payout",
                "payout_usd",
                "chargeback_amount",
                "chargeback_amount_usd",
                "net_payout",
                "net_payout_usd",
                "currency",
            ]
        ]
    )
    create_download_button("–°–∫–∞—á–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º", summary, "partner_summary.csv")

    overall = aggregate_overall(summary)
    overall["currency"] = overall["currency"].fillna("USD").replace("", "USD").str.upper()
    overall["conversion_rate"] = overall["currency"].apply(lambda cur: resolve_rate(cur, exchange_rates))
    overall["payout_usd"] = (overall["payout"] * overall["conversion_rate"]).round(2)
    overall["chargeback_amount_usd"] = (
        overall["chargeback_amount"] * overall["conversion_rate"]
    ).round(2)
    overall["net_payout_usd"] = (overall["net_payout"] * overall["conversion_rate"]).round(2)

    st.subheader("–û–±—â–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –±–∞–π–µ—Ä–∞–º")
    st.dataframe(
        overall[
            [
                "buyer",
                "currency",
                "deposits",
                "chargebacks",
                "net_deposits",
                "payout",
                "payout_usd",
                "chargeback_amount",
                "chargeback_amount_usd",
                "net_payout",
                "net_payout_usd",
                "partner_program",
            ]
        ]
    )
    create_download_button("–°–∫–∞—á–∞—Ç—å –æ–±—â—É—é —Å–≤–æ–¥–∫—É", overall, "overall_summary.csv")

    buyer_detail_options = sorted(summary["buyer"].unique())

    if buyer_detail_options:
        st.subheader("–û—Ç—á–µ—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –±–∞–π–µ—Ä—É")
        buyer_for_report = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–π–µ—Ä–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –≤—ã–≥—Ä—É–∑–∫–∏", buyer_detail_options)

        buyer_summary = summary[summary["buyer"] == buyer_for_report].copy()

        if buyer_summary.empty:
            st.info("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
            return

        offers_table = buyer_summary[
            ["partner_program", "deposits", "payout", "payout_usd", "net_payout", "net_payout_usd"]
        ].rename(
            columns={
                "partner_program": "–û—Ñ—Ñ–µ—Ä",
                "deposits": "–î–µ–ø–æ–∑–∏—Ç–æ–≤",
                "payout": "–†–µ–≤–µ–Ω—é –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "payout_usd": "–†–µ–≤–µ–Ω—é –≤ $$",
                "net_payout": "–†–µ–≤–µ–Ω—é (net) –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "net_payout_usd": "–†–µ–≤–µ–Ω—é (net) –≤ $$",
            }
        )
        offers_table["–î–µ–ø–æ–∑–∏—Ç–æ–≤"] = offers_table["–î–µ–ø–æ–∑–∏—Ç–æ–≤"].astype(int)
        offers_table = offers_table[
            [
                "–û—Ñ—Ñ–µ—Ä",
                "–î–µ–ø–æ–∑–∏—Ç–æ–≤",
                "–†–µ–≤–µ–Ω—é –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "–†–µ–≤–µ–Ω—é –≤ $$",
                "–†–µ–≤–µ–Ω—é (net) –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "–†–µ–≤–µ–Ω—é (net) –≤ $$",
            ]
        ]
        offers_table = append_total_row(
            offers_table,
            "–°—É–º–º–∞",
            [
                "–î–µ–ø–æ–∑–∏—Ç–æ–≤",
                "–†–µ–≤–µ–Ω—é –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "–†–µ–≤–µ–Ω—é –≤ $$",
                "–†–µ–≤–µ–Ω—é (net) –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "–†–µ–≤–µ–Ω—é (net) –≤ $$",
            ],
        )

        st.markdown("**–í—ã–ø–ª–∞—Ç—ã**")
        st.dataframe(offers_table)
        create_download_button(
            f"–°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä—É ‚Äî {buyer_for_report}",
            offers_table,
            f"buyer_report_{buyer_for_report}.csv",
        )

        chargebacks_table = buyer_summary[buyer_summary["chargebacks"] > 0][
            ["partner_program", "chargebacks", "chargeback_amount", "chargeback_amount_usd"]
        ].rename(
            columns={
                "partner_program": "–û—Ñ—Ñ–µ—Ä",
                "chargebacks": "–ß–∞—Ä–¥–∂–±–µ–∫–æ–≤",
                "chargeback_amount": "–ß–∞—Ä–¥–∂ –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "chargeback_amount_usd": "–ß–∞—Ä–¥–∂ –≤ $$",
            }
        )

        if not chargebacks_table.empty:
            chargebacks_table["–ß–∞—Ä–¥–∂–±–µ–∫–æ–≤"] = chargebacks_table["–ß–∞—Ä–¥–∂–±–µ–∫–æ–≤"].astype(int)
            chargebacks_table = append_total_row(
                chargebacks_table,
                "–°—É–º–º–∞",
                ["–ß–∞—Ä–¥–∂–±–µ–∫–æ–≤", "–ß–∞—Ä–¥–∂ –≤ –≤–∞–ª—é—Ç–µ –ü–ü", "–ß–∞—Ä–¥–∂ –≤ $$"],
            )

            st.markdown("**–ß–∞—Ä–¥–∂–±–µ–∫–∏**")
            st.dataframe(chargebacks_table)
            create_download_button(
                f"–°–∫–∞—á–∞—Ç—å —á–∞—Ä–¥–∂–±–µ–∫–∏ ‚Äî {buyer_for_report}",
                chargebacks_table,
                f"buyer_chargebacks_{buyer_for_report}.csv",
            )


def render_expenses_module(sidebar: DeltaGenerator) -> None:
    st.subheader("üí∏ –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –ø–æ –±–∞–π–µ—Ä–∞–º")
    st.caption(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV- –∏–ª–∏ XLSX-—Ñ–∞–π–ª —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ (–∏–∑ Excel –±–µ—Ä—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç) ‚Äî –º–æ–¥—É–ª—å –æ–±—ä–µ–¥–∏–Ω–∏—Ç –±–ª–æ–∫–∏ –∏ –ø–æ—Å—á–∏—Ç–∞–µ—Ç –∏—Ç–æ–≥–∏ –ø–æ –±–∞–π–µ—Ä–∞–º."
    )

    uploaded_files = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ XLSX",
        type=["csv", "xlsx"],
        accept_multiple_files=True,
        key="expenses_files",
    )

    if not uploaded_files:
        st.info("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º.")
        return

    expense_frames: list[pd.DataFrame] = []
    errors: list[str] = []

    for uploaded in uploaded_files:
        try:
            details = load_expenses_file(uploaded, source_name=uploaded.name)
        except Exception as exc:  # pragma: no cover - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            errors.append(f"{uploaded.name}: {exc}")
            continue

        if details.empty:
            errors.append(f"{uploaded.name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ")
            continue

        expense_frames.append(details)

    if errors:
        st.warning("\n".join(errors))

    if not expense_frames:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤.")
        return

    combined = pd.concat(expense_frames, ignore_index=True)
    combined["amount"] = combined["amount"].astype(float).round(2)

    buyer_options = sorted(combined["buyer"].unique())
    selected_buyers = st.multiselect(
        "–ë–∞–π–µ—Ä—ã (—Ä–∞—Å—Ö–æ–¥—ã)",
        options=buyer_options,
        default=buyer_options,
        key="expense_buyers",
    )

    type_options = sorted(combined["expense_type"].unique())
    selected_types = st.multiselect(
        "–¢–∏–ø—ã —Ä–∞—Å—Ö–æ–¥–æ–≤",
        options=type_options,
        default=type_options,
        key="expense_types",
    )

    filtered = combined[
        combined["buyer"].isin(selected_buyers) & combined["expense_type"].isin(selected_types)
    ]

    if filtered.empty:
        st.warning("–ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    detail_display = filtered.rename(
        columns={
            "buyer": "–ë–∞–π–µ—Ä",
            "expense_type": "–¢–∏–ø —Ä–∞—Å—Ö–æ–¥–∞",
            "item_count": "–ö–æ–ª-–≤–æ",
            "amount": "–°—É–º–º–∞, $",
            "source_file": "–ò—Å—Ç–æ—á–Ω–∏–∫",
            "notes": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
        }
    )

    st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤")
    st.dataframe(detail_display, use_container_width=True)
    create_download_button("–°–∫–∞—á–∞—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤", detail_display, "expenses_details.csv")

    by_type = aggregate_expenses_by_buyer(filtered)
    by_type_display = by_type.rename(
        columns={
            "buyer": "–ë–∞–π–µ—Ä",
            "expense_type": "–¢–∏–ø —Ä–∞—Å—Ö–æ–¥–∞",
            "item_count": "–ö–æ–ª-–≤–æ",
            "amount": "–°—É–º–º–∞, $",
        }
    )
    st.subheader("–°–≤–æ–¥–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ä–∞—Å—Ö–æ–¥–æ–≤")
    st.dataframe(by_type_display, use_container_width=True)
    create_download_button("–°–∫–∞—á–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Ç–∏–ø–∞–º", by_type_display, "expenses_by_type.csv")

    totals = aggregate_expenses_totals(filtered)
    totals_display = totals.rename(
        columns={
            "buyer": "–ë–∞–π–µ—Ä",
            "total_amount": "–í—Å–µ–≥–æ, $",
            "total_items": "–ö–æ–ª-–≤–æ –ø–æ–∑–∏—Ü–∏–π",
            "expense_types": "–¢–∏–ø–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤",
            "entries": "–°—Ç—Ä–æ–∫",
        }
    )

    numeric_columns = ["–í—Å–µ–≥–æ, $", "–ö–æ–ª-–≤–æ –ø–æ–∑–∏—Ü–∏–π", "–¢–∏–ø–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤", "–°—Ç—Ä–æ–∫"]
    for column in numeric_columns[1:]:
        if column in totals_display.columns:
            totals_display[column] = totals_display[column].astype(int)
    totals_display["–í—Å–µ–≥–æ, $"] = totals_display["–í—Å–µ–≥–æ, $"].round(2)
    totals_display = append_total_row(totals_display, "–°—É–º–º–∞", numeric_columns)

    st.subheader("–ò—Ç–æ–≥–æ –ø–æ –±–∞–π–µ—Ä–∞–º")
    st.dataframe(totals_display, use_container_width=True)
    create_download_button("–°–∫–∞—á–∞—Ç—å –∏—Ç–æ–≥–∏ –ø–æ –±–∞–π–µ—Ä–∞–º", totals_display, "expenses_totals.csv")

    sidebar.subheader("–ë—ã—Å—Ç—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    total_spent = filtered["amount"].sum()
    unique_buyers = filtered["buyer"].nunique()
    sidebar.metric("–†–∞—Å—Ö–æ–¥–æ–≤ –≤—Å–µ–≥–æ, $", f"{total_spent:,.2f}")
    sidebar.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–π–µ—Ä–æ–≤", unique_buyers)

    buyer_expense_options = sorted(filtered["buyer"].unique())
    if buyer_expense_options:
        st.subheader("–û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞")
        buyer_for_expenses = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–π–µ—Ä–∞ (—Ä–∞—Å—Ö–æ–¥—ã)",
            options=buyer_expense_options,
            key="expense_buyer_report",
        )

        buyer_expenses = filtered[filtered["buyer"] == buyer_for_expenses].copy()

        if buyer_expenses.empty:
            st.info("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
        else:
            buyer_detail = buyer_expenses.rename(
                columns={
                    "expense_type": "–¢–∏–ø —Ä–∞—Å—Ö–æ–¥–∞",
                    "item_count": "–ö–æ–ª-–≤–æ",
                    "amount": "–°—É–º–º–∞, $",
                    "notes": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                    "source_file": "–ò—Å—Ç–æ—á–Ω–∏–∫",
                }
            )[
                ["–¢–∏–ø —Ä–∞—Å—Ö–æ–¥–∞", "–°—É–º–º–∞, $", "–ö–æ–ª-–≤–æ", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ò—Å—Ç–æ—á–Ω–∏–∫"]
            ]
            buyer_detail = append_total_row(buyer_detail, "–°—É–º–º–∞", ["–ö–æ–ª-–≤–æ", "–°—É–º–º–∞, $"])

            st.dataframe(buyer_detail, use_container_width=True)
            create_download_button(
                f"–°–∫–∞—á–∞—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫ ‚Äî {buyer_for_expenses}",
                buyer_detail,
                f"expenses_{buyer_for_expenses}.csv",
            )


def render_spend_module(sidebar: DeltaGenerator) -> None:
    st.subheader("üìä –°–ø–µ–Ω–¥—ã –ø–æ –ª–∏—Å—Ç–∞–º Excel")
    st.caption(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ XLSX-—Ñ–∞–π–ª–æ–≤ (–∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ CSV-–ª–∏—Å—Ç—ã) ‚Äî –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±–µ—Ä—ë—Ç —Å–ø–µ–Ω–¥—ã –ø–æ –±–∞–π–µ—Ä–∞–º."
    )

    uploaded_files = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å–æ —Å–ø–µ–Ω–¥–∞–º–∏",
        type=["xlsx", "xls", "csv"],
        accept_multiple_files=True,
        key="spend_files",
    )

    if not uploaded_files:
        st.info("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—á—ë—Ç—ã –ø–æ —Å–ø–µ–Ω–¥–∞–º.")
        return

    spend_frames: list[pd.DataFrame] = []
    errors: list[str] = []

    for uploaded in uploaded_files:
        suffix = Path(uploaded.name).suffix.lower()
        try:
            if suffix in {".xlsx", ".xls"}:
                frame = load_spend_workbook(uploaded, source_name=uploaded.name)
            else:
                sheet_name = Path(uploaded.name).stem
                frame = load_spend_sheet(uploaded, sheet_name=sheet_name, source_name=uploaded.name)
        except Exception as exc:  # pragma: no cover - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –æ—à–∏–±–∫—É
            errors.append(f"{uploaded.name}: {exc}")
            continue

        warnings = getattr(frame, "attrs", {}).get("warnings", [])
        if warnings:
            errors.extend(f"{uploaded.name}: {warning}" for warning in warnings)
            frame = frame.copy()
            try:
                del frame.attrs["warnings"]
            except KeyError:
                pass

        if frame.empty:
            errors.append(f"{uploaded.name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ")
            continue

        spend_frames.append(frame)

    if errors:
        st.warning("\n".join(errors))

    if not spend_frames:
        st.error("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–ø–µ–Ω–¥—ã –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")
        return

    combined = pd.concat(spend_frames, ignore_index=True)
    combined["currency"] = combined["currency"].fillna("USD").replace("", "USD")
    combined["sheet_name"] = combined["sheet_name"].fillna("–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    combined["buyer"] = combined["buyer"].astype(str)
    combined["spend"] = combined["spend"].astype(float).round(2)
    if "total" in combined:
        combined["total"] = combined["total"].astype(float)

    sheet_options = sorted({sheet for sheet in combined["sheet_name"].unique() if isinstance(sheet, str)})
    selected_sheets = st.multiselect(
        "–õ–∏—Å—Ç—ã / –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞",
        options=sheet_options,
        default=sheet_options,
        key="spend_sheet_filter",
    )

    buyer_options = sorted(combined["buyer"].unique())
    selected_buyers = st.multiselect(
        "–ë–∞–π–µ—Ä—ã (—Å–ø–µ–Ω–¥—ã)",
        options=buyer_options,
        default=buyer_options,
        key="spend_buyer_filter",
    )

    currency_options = sorted({cur for cur in combined["currency"].unique() if isinstance(cur, str)})
    if not currency_options:
        currency_options = ["USD"]
    selected_currencies = st.multiselect(
        "–í–∞–ª—é—Ç—ã",
        options=currency_options,
        default=currency_options,
        key="spend_currency_filter",
    )

    sidebar.subheader("–ö—É—Ä—Å —Å–ø–µ–Ω–¥–æ–≤ ‚Üí $")
    sidebar.caption("–£–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–ª–∞—Ä–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 1 –µ–¥–∏–Ω–∏—Ü–µ –≤–∞–ª—é—Ç—ã —Å–ø–µ–Ω–¥–∞.")
    spend_rates: dict[str, float] = {}
    for currency in currency_options:
        default_rate = 1.0
        spend_rates[currency] = sidebar.number_input(
            f"{currency} ‚Üí USD",
            min_value=0.0,
            value=default_rate,
            step=0.01,
            format="%.4f",
            key=f"spend_rate_{currency}",
        )

    spend_rates.setdefault("USD", 1.0)

    filtered = combined[
        combined["sheet_name"].isin(selected_sheets)
        & combined["buyer"].isin(selected_buyers)
        & combined["currency"].isin(selected_currencies)
    ]

    if filtered.empty:
        st.warning("–ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ—Ç —Å—Ç—Ä–æ–∫ —Å–æ —Å–ø–µ–Ω–¥–∞–º–∏.")
        return

    filtered = filtered.copy()
    filtered["currency"] = filtered["currency"].fillna("USD")
    rate_series = filtered["currency"].map(spend_rates).fillna(1.0)
    filtered["spend_usd"] = (filtered["spend"] * rate_series).round(2)

    display_details = filtered.copy()
    display_details = display_details.rename(
        columns={
            "buyer": "–ë–∞–π–µ—Ä",
            "account_label": "–ê–∫–∫–∞—É–Ω—Ç / –∫–∞—Ä—Ç–∞",
            "account_id": "ID –∞–∫–∫–∞—É–Ω—Ç–∞",
            "sheet_name": "–õ–∏—Å—Ç",
            "notes": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
            "currency": "–í–∞–ª—é—Ç–∞",
            "source_file": "–§–∞–π–ª",
            "spend_usd": "–°–ø–µ–Ω–¥ (USD)",
        }
    )
    id_is_empty = display_details["ID –∞–∫–∫–∞—É–Ω—Ç–∞"].astype(str).str.strip().isin({"", "nan", "None"})
    display_details.loc[id_is_empty, "ID –∞–∫–∫–∞—É–Ω—Ç–∞"] = display_details.loc[
        id_is_empty, "–ê–∫–∫–∞—É–Ω—Ç / –∫–∞—Ä—Ç–∞"
    ]
    display_details = display_details[
        [
            "ID –∞–∫–∫–∞—É–Ω—Ç–∞",
            "–°–ø–µ–Ω–¥ (USD)",
            "–õ–∏—Å—Ç",
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
            "–ê–∫–∫–∞—É–Ω—Ç / –∫–∞—Ä—Ç–∞",
            "–ë–∞–π–µ—Ä",
            "–í–∞–ª—é—Ç–∞",
            "–§–∞–π–ª",
        ]
    ]
    display_details["–°–ø–µ–Ω–¥ (USD)"] = display_details["–°–ø–µ–Ω–¥ (USD)"].apply(lambda value: f"{value:,.2f}")
    display_details["–í–∞–ª—é—Ç–∞"] = display_details["–í–∞–ª—é—Ç–∞"].replace({"UNKNOWN": "‚Äî"})

    st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–ø–µ–Ω–¥–æ–≤")
    st.dataframe(display_details, use_container_width=True)

    download_details = filtered.rename(
        columns={
            "sheet_name": "sheet",
            "buyer": "buyer",
            "account_label": "account_label",
            "account_id": "account_id",
            "spend": "spend",
            "spend_usd": "spend_usd",
            "currency": "currency",
            "notes": "notes",
            "source_file": "source",
        }
    )
    download_details = download_details[
        [
            "sheet",
            "buyer",
            "account_label",
            "account_id",
            "spend",
            "spend_usd",
            "currency",
            "notes",
            "source",
        ]
    ]
    create_download_button("–°–∫–∞—á–∞—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é —Å–ø–µ–Ω–¥–æ–≤", download_details, "spends_details.csv")

    buyer_summary = (
        filtered.groupby("buyer", dropna=False)
        .agg(
            total_spend_usd=("spend_usd", "sum"),
            accounts=("account_id", "nunique"),
            rows=("account_id", "count"),
            sheets=("sheet_name", "nunique"),
        )
        .reset_index()
        .sort_values(["buyer"], na_position="last")
    )
    buyer_summary["buyer"] = buyer_summary["buyer"].fillna("")
    buyer_summary["total_spend_usd"] = buyer_summary["total_spend_usd"].round(2)

    buyer_display = buyer_summary.rename(
        columns={
            "buyer": "–ë–∞–π–µ—Ä",
            "total_spend_usd": "–°—É–º–º–∞ —Å–ø–µ–Ω–¥–æ–≤ (USD)",
            "accounts": "–ê–∫–∫–∞—É–Ω—Ç–æ–≤",
            "rows": "–°—Ç—Ä–æ–∫",
            "sheets": "–õ–∏—Å—Ç–æ–≤",
        }
    )
    buyer_display["–°—É–º–º–∞ —Å–ø–µ–Ω–¥–æ–≤ (USD)"] = buyer_display["–°—É–º–º–∞ —Å–ø–µ–Ω–¥–æ–≤ (USD)"].apply(lambda v: f"{v:,.2f}")

    st.subheader("–°–≤–æ–¥–∫–∞ –ø–æ –±–∞–π–µ—Ä–∞–º")
    st.dataframe(buyer_display, use_container_width=True)
    create_download_button("–°–∫–∞—á–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –±–∞–π–µ—Ä–∞–º", buyer_summary, "spends_by_buyer.csv")

    sheet_summary = (
        filtered.groupby("sheet_name", dropna=False)
        .agg(
            total_spend_usd=("spend_usd", "sum"),
            buyers=("buyer", "nunique"),
            rows=("account_id", "count"),
        )
        .reset_index()
        .sort_values(["sheet_name"], na_position="last")
    )
    sheet_summary["sheet_name"] = sheet_summary["sheet_name"].fillna("–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    sheet_summary["total_spend_usd"] = sheet_summary["total_spend_usd"].round(2)

    sheet_display = sheet_summary.rename(
        columns={
            "sheet_name": "–õ–∏—Å—Ç",
            "total_spend_usd": "–°—É–º–º–∞ —Å–ø–µ–Ω–¥–æ–≤ (USD)",
            "buyers": "–ë–∞–π–µ—Ä–æ–≤",
            "rows": "–°—Ç—Ä–æ–∫",
        }
    )
    sheet_display["–°—É–º–º–∞ —Å–ø–µ–Ω–¥–æ–≤ (USD)"] = sheet_display["–°—É–º–º–∞ —Å–ø–µ–Ω–¥–æ–≤ (USD)"].apply(lambda v: f"{v:,.2f}")

    st.subheader("–°–≤–æ–¥–∫–∞ –ø–æ –ª–∏—Å—Ç–∞–º")
    st.dataframe(sheet_display, use_container_width=True)
    create_download_button("–°–∫–∞—á–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –ª–∏—Å—Ç–∞–º", sheet_summary, "spends_by_sheet.csv")

    buyer_report_options = sorted(filtered["buyer"].unique())
    if buyer_report_options:
        st.subheader("–°–ø–µ–Ω–¥—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞ –ø–æ –ª–∏—Å—Ç–∞–º")
        buyer_for_lines = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–π–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏",
            options=buyer_report_options,
            key="spend_buyer_lines",
        )

        buyer_lines = filtered[filtered["buyer"] == buyer_for_lines].copy()

        if buyer_lines.empty:
            st.info("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞ –Ω–µ—Ç —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
        else:
            buyer_detail = buyer_lines.rename(
                columns={
                    "sheet_name": "–õ–∏—Å—Ç",
                    "account_id": "ID –∞–∫–∫–∞—É–Ω—Ç–∞",
                    "account_label": "–ê–∫–∫–∞—É–Ω—Ç / –∫–∞—Ä—Ç–∞",
                    "spend_usd": "–°–ø–µ–Ω–¥ (USD)",
                    "currency": "–í–∞–ª—é—Ç–∞",
                    "notes": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                    "source_file": "–§–∞–π–ª",
                }
            )[
                [
                    "ID –∞–∫–∫–∞—É–Ω—Ç–∞",
                    "–°–ø–µ–Ω–¥ (USD)",
                    "–õ–∏—Å—Ç",
                    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                    "–ê–∫–∫–∞—É–Ω—Ç / –∫–∞—Ä—Ç–∞",
                    "–í–∞–ª—é—Ç–∞",
                    "–§–∞–π–ª",
                ]
            ]

            detail_id_empty = buyer_detail["ID –∞–∫–∫–∞—É–Ω—Ç–∞"].astype(str).str.strip().isin({"", "nan", "None"})
            buyer_detail.loc[detail_id_empty, "ID –∞–∫–∫–∞—É–Ω—Ç–∞"] = buyer_detail.loc[
                detail_id_empty, "–ê–∫–∫–∞—É–Ω—Ç / –∫–∞—Ä—Ç–∞"
            ]
            buyer_detail = buyer_detail.sort_values(["–õ–∏—Å—Ç", "–ê–∫–∫–∞—É–Ω—Ç / –∫–∞—Ä—Ç–∞", "ID –∞–∫–∫–∞—É–Ω—Ç–∞"])

            buyer_detail_with_total = append_total_row(
                buyer_detail,
                "–°—É–º–º–∞",
                ["–°–ø–µ–Ω–¥ (USD)"],
            )

            buyer_detail_display = buyer_detail_with_total.copy()
            buyer_detail_display["–°–ø–µ–Ω–¥ (USD)"] = buyer_detail_display["–°–ø–µ–Ω–¥ (USD)"].apply(
                lambda value: "" if pd.isna(value) else f"{value:,.2f}"
            )

            st.dataframe(buyer_detail_display, use_container_width=True)
            create_download_button(
                f"–°–∫–∞—á–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ ‚Äî {buyer_for_lines}",
                buyer_detail_with_total,
                f"spends_{buyer_for_lines}.csv",
            )

            sheet_breakdown = (
                buyer_lines.groupby(["sheet_name", "currency"], dropna=False)
                .agg(
                    total_spend_usd=("spend_usd", "sum"),
                    accounts=("account_id", "nunique"),
                    rows=("account_id", "count"),
                )
                .reset_index()
            )

            if not sheet_breakdown.empty:
                sheet_breakdown = sheet_breakdown.rename(
                    columns={
                        "sheet_name": "–õ–∏—Å—Ç",
                        "currency": "–í–∞–ª—é—Ç–∞",
                        "total_spend_usd": "–°—É–º–º–∞ —Å–ø–µ–Ω–¥–æ–≤ (USD)",
                        "accounts": "–ê–∫–∫–∞—É–Ω—Ç–æ–≤",
                        "rows": "–°—Ç—Ä–æ–∫",
                    }
                )
                sheet_breakdown["–°—É–º–º–∞ —Å–ø–µ–Ω–¥–æ–≤ (USD)"] = sheet_breakdown["–°—É–º–º–∞ —Å–ø–µ–Ω–¥–æ–≤ (USD)"].round(2)

                sheet_breakdown_display = sheet_breakdown.copy()
                sheet_breakdown_display["–°—É–º–º–∞ —Å–ø–µ–Ω–¥–æ–≤ (USD)"] = sheet_breakdown_display[
                    "–°—É–º–º–∞ —Å–ø–µ–Ω–¥–æ–≤ (USD)"
                ].apply(lambda value: f"{value:,.2f}")

                st.markdown("**–†–∞–∑—Ä–µ–∑ –ø–æ –ª–∏—Å—Ç–∞–º**")
                st.dataframe(sheet_breakdown_display, use_container_width=True)
                create_download_button(
                    f"–°–∫–∞—á–∞—Ç—å —Ä–∞–∑—Ä–µ–∑ –ø–æ –ª–∏—Å—Ç–∞–º ‚Äî {buyer_for_lines}",
                    sheet_breakdown,
                    f"spends_by_sheet_{buyer_for_lines}.csv",
                )

    sidebar.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —Å–ø–µ–Ω–¥–∞–º")
    sidebar.metric("–°—É–º–º–∞ —Å–ø–µ–Ω–¥–æ–≤ (USD)", f"{filtered['spend_usd'].sum():,.2f}")
    sidebar.metric("–ë–∞–π–µ—Ä–æ–≤", int(filtered["buyer"].nunique()))
    sidebar.metric("–õ–∏—Å—Ç–æ–≤", int(filtered["sheet_name"].nunique()))


def render_combined_module(sidebar: DeltaGenerator) -> None:
    st.subheader("üß© –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –±–∞–π–µ—Ä–∞–º")
    st.caption(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å–æ —Å–≤–µ—Ä–∫–∞–º–∏, —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∏ —Å–ø–µ–Ω–¥–∞–º–∏ ‚Äî –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ —Ç—Ä–∏ –±–ª–æ–∫–∞ —Å—Ä–∞–∑—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –±–∞–π–µ—Ä—É."
    )

    reconciliation_files = st.file_uploader(
        "–°–≤–µ—Ä–∫–∏ (CSV/XLSX)",
        type=["csv", "xlsx"],
        accept_multiple_files=True,
        key="combined_reconciliation_files",
    )
    expenses_files = st.file_uploader(
        "–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ (CSV/XLSX)",
        type=["csv", "xlsx"],
        accept_multiple_files=True,
        key="combined_expenses_files",
    )
    spend_files = st.file_uploader(
        "–°–ø–µ–Ω–¥—ã (XLSX/CSV)",
        type=["xlsx", "xls", "csv"],
        accept_multiple_files=True,
        key="combined_spend_files",
    )

    if not reconciliation_files and not expenses_files and not spend_files:
        st.info("–ß—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—á—ë—Ç, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª —Å–æ —Å–≤–µ—Ä–∫–∞–º–∏, —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∏–ª–∏ —Å–ø–µ–Ω–¥–∞–º–∏.")
        return

    reconciliation_frames: list[pd.DataFrame] = []
    reconciliation_errors: list[str] = []

    if reconciliation_files:
        for uploaded in reconciliation_files:
            partner_program = infer_partner_program(uploaded.name)
            try:
                details = load_reconciliation_file(uploaded, partner_program, source_name=uploaded.name)
            except Exception as exc:  # pragma: no cover - —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                reconciliation_errors.append(f"{uploaded.name}: {exc}")
                continue

            if details.empty:
                reconciliation_errors.append(f"{uploaded.name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ")
                continue

            reconciliation_frames.append(details)

    if reconciliation_errors:
        st.warning("\n".join(reconciliation_errors))

    if reconciliation_frames:
        reconciliation_details = pd.concat(reconciliation_frames, ignore_index=True)
    else:
        reconciliation_details = pd.DataFrame()

    expense_frames: list[pd.DataFrame] = []
    expense_errors: list[str] = []

    if expenses_files:
        for uploaded in expenses_files:
            try:
                details = load_expenses_file(uploaded, source_name=uploaded.name)
            except Exception as exc:  # pragma: no cover - —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                expense_errors.append(f"{uploaded.name}: {exc}")
                continue

            if details.empty:
                expense_errors.append(f"{uploaded.name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ")
                continue

            expense_frames.append(details)

    if expense_errors:
        st.warning("\n".join(expense_errors))

    if expense_frames:
        expense_details = pd.concat(expense_frames, ignore_index=True)
        expense_details["amount"] = expense_details["amount"].astype(float).round(2)
    else:
        expense_details = pd.DataFrame()

    spend_frames: list[pd.DataFrame] = []
    spend_errors: list[str] = []

    if spend_files:
        for uploaded in spend_files:
            suffix = Path(uploaded.name).suffix.lower()
            try:
                if suffix in {".xlsx", ".xls"}:
                    frame = load_spend_workbook(uploaded, source_name=uploaded.name)
                else:
                    sheet_name = Path(uploaded.name).stem
                    frame = load_spend_sheet(uploaded, sheet_name=sheet_name, source_name=uploaded.name)
            except Exception as exc:  # pragma: no cover - —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                spend_errors.append(f"{uploaded.name}: {exc}")
                continue

            warnings = getattr(frame, "attrs", {}).get("warnings", [])
            if warnings:
                spend_errors.extend(f"{uploaded.name}: {warning}" for warning in warnings)
                frame = frame.copy()
                try:
                    del frame.attrs["warnings"]
                except KeyError:
                    pass

            if frame.empty:
                spend_errors.append(f"{uploaded.name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ")
                continue

            spend_frames.append(frame)

    if spend_errors:
        st.warning("\n".join(spend_errors))

    if spend_frames:
        spend_details = pd.concat(spend_frames, ignore_index=True)
        spend_details["currency"] = spend_details["currency"].fillna("USD").replace("", "USD")
        spend_details["sheet_name"] = spend_details["sheet_name"].fillna("–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        spend_details["buyer"] = spend_details["buyer"].astype(str)
        spend_details["spend"] = spend_details["spend"].astype(float).round(2)
    else:
        spend_details = pd.DataFrame()

    buyer_options = set()
    for df in (reconciliation_details, expense_details, spend_details):
        if not df.empty and "buyer" in df.columns:
            buyer_options.update(df["buyer"].astype(str).str.strip())

    buyer_options = sorted({buyer for buyer in buyer_options if buyer})

    if not buyer_options:
        st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–π–µ—Ä–æ–≤. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ —Å–≤–µ—Ä–∫–∞–º–∏, —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∏–ª–∏ —Å–ø–µ–Ω–¥–∞–º–∏.")
        return

    currency_candidates: set[str] = set()
    if not reconciliation_details.empty and "currency" in reconciliation_details.columns:
        currency_candidates.update(
            reconciliation_details["currency"].dropna().astype(str).str.upper().replace({"", "NAN"}, "USD")
        )
    if not spend_details.empty and "currency" in spend_details.columns:
        currency_candidates.update(
            spend_details["currency"].dropna().astype(str).str.upper().replace({"", "NAN"}, "USD")
        )

    currency_candidates = {cur for cur in currency_candidates if cur and cur != "UNKNOWN"}
    if not currency_candidates:
        currency_candidates = {"USD"}

    sidebar.subheader("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç ‚Üí $")
    sidebar.caption("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å: —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–ª–∞—Ä–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 1 –µ–¥–∏–Ω–∏—Ü–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã.")
    exchange_rates: dict[str, float] = {}
    for currency in sorted(currency_candidates):
        exchange_rates[currency] = sidebar.number_input(
            f"{currency} ‚Üí USD",
            min_value=0.0,
            value=1.0,
            step=0.01,
            format="%.4f",
            key=f"combined_rate_{currency}",
        )

    exchange_rates.setdefault("USD", 1.0)

    selected_buyer = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–π–µ—Ä–∞",
        options=buyer_options,
        key="combined_buyer_select",
    )

    st.subheader("–°–≤–µ—Ä–∫–∏")
    if reconciliation_details.empty:
        st.info("–§–∞–π–ª—ã —Å–≤–µ—Ä–æ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    else:
        buyer_reconciliation = reconciliation_details[
            reconciliation_details["buyer"].astype(str) == selected_buyer
        ].copy()

        if buyer_reconciliation.empty:
            st.info("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞ –Ω–µ—Ç —Å—Ç—Ä–æ–∫ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–≤–µ—Ä–∫–∞—Ö.")
        else:
            buyer_reconciliation["currency"] = (
                buyer_reconciliation["currency"].fillna("USD").replace("", "USD").astype(str).str.upper()
            )

            buyer_summary = aggregate_by_partner_and_buyer(buyer_reconciliation)
            buyer_summary["currency"] = (
                buyer_summary["currency"].fillna("USD").replace("", "USD").astype(str).str.upper()
            )
            buyer_summary["conversion_rate"] = buyer_summary["currency"].apply(
                lambda cur: resolve_rate(cur, exchange_rates)
            )
            buyer_summary["payout_usd"] = (buyer_summary["payout"] * buyer_summary["conversion_rate"]).round(2)
            buyer_summary["chargeback_amount_usd"] = (
                buyer_summary["chargeback_amount"] * buyer_summary["conversion_rate"]
            ).round(2)
            buyer_summary["net_payout_usd"] = (
                buyer_summary["net_payout"] * buyer_summary["conversion_rate"]
            ).round(2)

            offers_table = buyer_summary[
                [
                    "partner_program",
                    "deposits",
                    "payout",
                    "payout_usd",
                    "net_payout",
                    "net_payout_usd",
                ]
            ].rename(
                columns={
                    "partner_program": "–û—Ñ—Ñ–µ—Ä",
                    "deposits": "–î–µ–ø–æ–∑–∏—Ç–æ–≤",
                    "payout": "–†–µ–≤–µ–Ω—é –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                    "payout_usd": "–†–µ–≤–µ–Ω—é –≤ $$",
                    "net_payout": "–†–µ–≤–µ–Ω—é (net) –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                    "net_payout_usd": "–†–µ–≤–µ–Ω—é (net) –≤ $$",
                }
            )
            offers_table["–î–µ–ø–æ–∑–∏—Ç–æ–≤"] = offers_table["–î–µ–ø–æ–∑–∏—Ç–æ–≤"].astype(int)
            offers_table = offers_table[
                [
                    "–û—Ñ—Ñ–µ—Ä",
                    "–î–µ–ø–æ–∑–∏—Ç–æ–≤",
                    "–†–µ–≤–µ–Ω—é –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                    "–†–µ–≤–µ–Ω—é –≤ $$",
                    "–†–µ–≤–µ–Ω—é (net) –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                    "–†–µ–≤–µ–Ω—é (net) –≤ $$",
                ]
            ]
            offers_table = append_total_row(
                offers_table,
                "–°—É–º–º–∞",
                [
                    "–î–µ–ø–æ–∑–∏—Ç–æ–≤",
                    "–†–µ–≤–µ–Ω—é –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                    "–†–µ–≤–µ–Ω—é –≤ $$",
                    "–†–µ–≤–µ–Ω—é (net) –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                    "–†–µ–≤–µ–Ω—é (net) –≤ $$",
                ],
            )

            st.markdown("**–í—ã–ø–ª–∞—Ç—ã**")
            st.dataframe(offers_table, use_container_width=True)
            create_download_button(
                f"–°–∫–∞—á–∞—Ç—å —Å–≤–µ—Ä–∫–∏ ‚Äî {selected_buyer}",
                offers_table,
                f"reconciliation_{selected_buyer}.csv",
            )

            chargebacks_table = buyer_summary[buyer_summary["chargebacks"] > 0][
                ["partner_program", "chargebacks", "chargeback_amount", "chargeback_amount_usd"]
            ].rename(
                columns={
                    "partner_program": "–û—Ñ—Ñ–µ—Ä",
                    "chargebacks": "–ß–∞—Ä–¥–∂–±–µ–∫–æ–≤",
                    "chargeback_amount": "–ß–∞—Ä–¥–∂ –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                    "chargeback_amount_usd": "–ß–∞—Ä–¥–∂ –≤ $$",
                }
            )

            if chargebacks_table.empty:
                st.markdown("_–ß–∞—Ä–¥–∂–±–µ–∫–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞ –Ω–µ—Ç._")
            else:
                chargebacks_table["–ß–∞—Ä–¥–∂–±–µ–∫–æ–≤"] = chargebacks_table["–ß–∞—Ä–¥–∂–±–µ–∫–æ–≤"].astype(int)
                chargebacks_table = append_total_row(
                    chargebacks_table,
                    "–°—É–º–º–∞",
                    ["–ß–∞—Ä–¥–∂–±–µ–∫–æ–≤", "–ß–∞—Ä–¥–∂ –≤ –≤–∞–ª—é—Ç–µ –ü–ü", "–ß–∞—Ä–¥–∂ –≤ $$"],
                )

                st.markdown("**–ß–∞—Ä–¥–∂–±–µ–∫–∏**")
                st.dataframe(chargebacks_table, use_container_width=True)
                create_download_button(
                    f"–°–∫–∞—á–∞—Ç—å —á–∞—Ä–¥–∂–±–µ–∫–∏ ‚Äî {selected_buyer}",
                    chargebacks_table,
                    f"reconciliation_chargebacks_{selected_buyer}.csv",
                )

    st.subheader("–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏")
    if expense_details.empty:
        st.info("–§–∞–π–ª—ã —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    else:
        buyer_expenses = expense_details[expense_details["buyer"].astype(str) == selected_buyer].copy()

        if buyer_expenses.empty:
            st.info("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞ –Ω–µ—Ç —Å—Ç—Ä–æ–∫ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞—Ö.")
        else:
            buyer_expense_table = buyer_expenses.rename(
                columns={
                    "expense_type": "–¢–∏–ø —Ä–∞—Å—Ö–æ–¥–∞",
                    "item_count": "–ö–æ–ª-–≤–æ",
                    "amount": "–°—É–º–º–∞, $",
                    "notes": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                    "source_file": "–ò—Å—Ç–æ—á–Ω–∏–∫",
                }
            )[["–¢–∏–ø —Ä–∞—Å—Ö–æ–¥–∞", "–°—É–º–º–∞, $", "–ö–æ–ª-–≤–æ", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ò—Å—Ç–æ—á–Ω–∏–∫"]]
            buyer_expense_table = append_total_row(
                buyer_expense_table,
                "–°—É–º–º–∞",
                ["–ö–æ–ª-–≤–æ", "–°—É–º–º–∞, $"],
            )

            st.dataframe(buyer_expense_table, use_container_width=True)
            create_download_button(
                f"–°–∫–∞—á–∞—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫ ‚Äî {selected_buyer}",
                buyer_expense_table,
                f"expenses_{selected_buyer}.csv",
            )

    st.subheader("–°–ø–µ–Ω–¥—ã")
    if spend_details.empty:
        st.info("–§–∞–π–ª—ã —Å–æ —Å–ø–µ–Ω–¥–∞–º–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    else:
        spend_details = spend_details.copy()
        rate_series = spend_details["currency"].map(exchange_rates).fillna(1.0)
        spend_details["spend_usd"] = (spend_details["spend"] * rate_series).round(2)

        buyer_spends = spend_details[spend_details["buyer"].astype(str) == selected_buyer].copy()

        if buyer_spends.empty:
            st.info("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞ –Ω–µ—Ç —Å—Ç—Ä–æ–∫ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–ø–µ–Ω–¥–∞—Ö.")
        else:
            buyer_detail = buyer_spends.rename(
                columns={
                    "sheet_name": "–õ–∏—Å—Ç",
                    "account_id": "ID –∞–∫–∫–∞—É–Ω—Ç–∞",
                    "account_label": "–ê–∫–∫–∞—É–Ω—Ç / –∫–∞—Ä—Ç–∞",
                    "spend_usd": "–°–ø–µ–Ω–¥ (USD)",
                    "currency": "–í–∞–ª—é—Ç–∞",
                    "notes": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                    "source_file": "–§–∞–π–ª",
                }
            )[
                [
                    "ID –∞–∫–∫–∞—É–Ω—Ç–∞",
                    "–°–ø–µ–Ω–¥ (USD)",
                    "–õ–∏—Å—Ç",
                    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                    "–ê–∫–∫–∞—É–Ω—Ç / –∫–∞—Ä—Ç–∞",
                    "–í–∞–ª—é—Ç–∞",
                    "–§–∞–π–ª",
                ]
            ]

            id_missing = buyer_detail["ID –∞–∫–∫–∞—É–Ω—Ç–∞"].astype(str).str.strip().isin({"", "nan", "None"})
            buyer_detail.loc[id_missing, "ID –∞–∫–∫–∞—É–Ω—Ç–∞"] = buyer_detail.loc[
                id_missing, "–ê–∫–∫–∞—É–Ω—Ç / –∫–∞—Ä—Ç–∞"
            ]
            buyer_detail = buyer_detail.sort_values(["–õ–∏—Å—Ç", "–ê–∫–∫–∞—É–Ω—Ç / –∫–∞—Ä—Ç–∞", "ID –∞–∫–∫–∞—É–Ω—Ç–∞"])

            buyer_detail_with_total = append_total_row(
                buyer_detail,
                "–°—É–º–º–∞",
                ["–°–ø–µ–Ω–¥ (USD)"],
            )

            buyer_detail_display = buyer_detail_with_total.copy()
            buyer_detail_display["–°–ø–µ–Ω–¥ (USD)"] = buyer_detail_display["–°–ø–µ–Ω–¥ (USD)"].apply(
                lambda value: "" if pd.isna(value) else f"{value:,.2f}"
            )

            st.dataframe(buyer_detail_display, use_container_width=True)
            create_download_button(
                f"–°–∫–∞—á–∞—Ç—å —Å–ø–µ–Ω–¥—ã ‚Äî {selected_buyer}",
                buyer_detail_with_total,
                f"spends_{selected_buyer}.csv",
            )

            sheet_breakdown = (
                buyer_spends.groupby(["sheet_name", "currency"], dropna=False)
                .agg(
                    total_spend_usd=("spend_usd", "sum"),
                    accounts=("account_id", "nunique"),
                    rows=("account_id", "count"),
                )
                .reset_index()
            )

            if sheet_breakdown.empty:
                st.markdown("_–î–∞–Ω–Ω—ã—Ö –ø–æ –ª–∏—Å—Ç–∞–º –Ω–µ—Ç._")
            else:
                sheet_breakdown = sheet_breakdown.rename(
                    columns={
                        "sheet_name": "–õ–∏—Å—Ç",
                        "currency": "–í–∞–ª—é—Ç–∞",
                        "total_spend_usd": "–°—É–º–º–∞ —Å–ø–µ–Ω–¥–æ–≤ (USD)",
                        "accounts": "–ê–∫–∫–∞—É–Ω—Ç–æ–≤",
                        "rows": "–°—Ç—Ä–æ–∫",
                    }
                )
                sheet_breakdown["–°—É–º–º–∞ —Å–ø–µ–Ω–¥–æ–≤ (USD)"] = sheet_breakdown["–°—É–º–º–∞ —Å–ø–µ–Ω–¥–æ–≤ (USD)"].round(2)

                sheet_breakdown_display = sheet_breakdown.copy()
                sheet_breakdown_display["–°—É–º–º–∞ —Å–ø–µ–Ω–¥–æ–≤ (USD)"] = sheet_breakdown_display[
                    "–°—É–º–º–∞ —Å–ø–µ–Ω–¥–æ–≤ (USD)"
                ].apply(lambda value: f"{value:,.2f}")

                st.markdown("**–†–∞–∑—Ä–µ–∑ –ø–æ –ª–∏—Å—Ç–∞–º**")
                st.dataframe(sheet_breakdown_display, use_container_width=True)
                create_download_button(
                    f"–°–∫–∞—á–∞—Ç—å —Ä–∞–∑—Ä–µ–∑ –ø–æ –ª–∏—Å—Ç–∞–º ‚Äî {selected_buyer}",
                    sheet_breakdown,
                    f"spends_by_sheet_{selected_buyer}.csv",
                )

st.set_page_config(page_title="ZP Calculator", layout="wide")

sidebar = st.sidebar
module = sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å", ["–°–≤–µ—Ä–∫–∏", "–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏", "–°–ø–µ–Ω–¥—ã", "–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ"], index=0)

if module == "–°–≤–µ—Ä–∫–∏":
    sidebar.header("–ü—Ä–∞–≤–∏–ª–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–≤–µ—Ä–æ–∫")
    sidebar.markdown(
        """
        * –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV (UTF-8).
        * –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: **Buyer**, **Commision/Commission Type**, **FTD Count**, **Payout**.
        * –°—Ç—Ä–æ–∫–∏ "–í—Å–µ–≥–æ" –∏ "–ò—Ç–æ–≥–æ" –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è ‚Äî –∏—Ç–æ–≥ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        """
    )
    st.title("ZP Calculator ‚Äî –°–≤–µ—Ä–∫–∏")
    render_reconciliation_module(sidebar)
elif module == "–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏":
    sidebar.header("–ü—Ä–∞–≤–∏–ª–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤")
    sidebar.markdown(
        """
        * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –≤ CSV (UTF-8, –±–µ–∑ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö —è—á–µ–µ–∫).
        * –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ "–ë–∞–π–µ—Ä", "–ö–æ–ª-–≤–æ", "–°—É–º–º–∞" –ø–æ —Ç–∏–ø—É —Ä–∞—Å—Ö–æ–¥–∞.
        * –°—Ç—Ä–æ–∫–∏ "–ò—Ç–æ–≥–æ" –∏ "–í—Å–µ–≥–æ" –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        """
    )
    st.title("ZP Calculator ‚Äî –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏")
    render_expenses_module(sidebar)
elif module == "–°–ø–µ–Ω–¥—ã":
    sidebar.header("–ü—Ä–∞–≤–∏–ª–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–ø–µ–Ω–¥–æ–≤")
    sidebar.markdown(
        """
        * –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è Excel-—Ñ–∞–π–ª—ã (XLSX/XLS) –∏–ª–∏ CSV-–ª–∏—Å—Ç—ã, –æ–¥–∏–Ω —Ñ–∞–π–ª = –æ–¥–∏–Ω –ª–∏—Å—Ç.
        * –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: **–ë–∞–π–µ—Ä**, **–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞** (–∏–ª–∏ **–ö–∞—Ä—Ç–∞**), **ID –∞–∫–∫–∞—É–Ω—Ç–∞**, **Spend**.
        * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö.
        * –õ–∏—Å—Ç—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º `DTD` —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ EUR, –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –≤ USD.
        * –ö—É—Ä—Å –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã –∫ –¥–æ–ª–ª–∞—Ä—É –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤ —Å–∞–π–¥–±–∞—Ä–µ; –æ—Ç—á—ë—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ USD.
        """
    )
    st.title("ZP Calculator ‚Äî –°–ø–µ–Ω–¥—ã")
    render_spend_module(sidebar)
else:
    sidebar.header("–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –±–∞–π–µ—Ä—É")
    sidebar.markdown(
        """
        * –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å–æ —Å–≤–µ—Ä–∫–∞–º–∏, —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏ –∏ —Å–ø–µ–Ω–¥–∞–º–∏.
        * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: CSV/XLSX –¥–ª—è —Å–≤–µ—Ä–æ–∫ –∏ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤, XLSX/XLS/CSV –¥–ª—è —Å–ø–µ–Ω–¥–æ–≤.
        * –í—Å–µ —Å—É–º–º—ã –≤ –æ—Ç—á—ë—Ç–µ –ø—Ä–∏–≤–æ–¥—è—Ç—Å—è –∫ USD –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤ —Å–∞–π–¥–±–∞—Ä–µ –∫—É—Ä—Å–∞–º.
        * –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç—Ä–∏ –±–ª–æ–∫–∞: —Å–≤–µ—Ä–∫–∏, —Ä–∞—Å—Ö–æ–¥—ã –∏ —Å–ø–µ–Ω–¥—ã.
        """
    )
    st.title("ZP Calculator ‚Äî –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ")
    render_combined_module(sidebar)
