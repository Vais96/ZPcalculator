from __future__ import annotations

import re
import sys
from io import BytesIO
from pathlib import Path

import pandas as pd
import streamlit as st
from streamlit.delta_generator import DeltaGenerator

ROOT_DIR = Path(__file__).resolve().parent
SRC_DIR = ROOT_DIR / "src"
if SRC_DIR.exists():
    sys.path.insert(0, str(SRC_DIR))

from zp_calculator.data_processing import (
    aggregate_by_partner_and_buyer,
    aggregate_expenses_by_buyer,
    aggregate_expenses_totals,
    aggregate_overall,
    load_expenses_file,
    load_reconciliation_file,
)


def create_download_button(label: str, df: pd.DataFrame, filename: str) -> None:
    csv_buffer = BytesIO()
    df.to_csv(csv_buffer, index=False, encoding="utf-8-sig")
    csv_buffer.seek(0)
    st.download_button(
        label=label,
        data=csv_buffer,
        file_name=filename,
        mime="text/csv",
    )


def append_total_row(df: pd.DataFrame, label: str, numeric_columns: list[str]) -> pd.DataFrame:
    if df.empty:
        return df

    total = {column: df[column].sum() if column in numeric_columns else "" for column in df.columns}
    first_column = df.columns[0]
    total[first_column] = label
    total_df = pd.DataFrame([total])
    # Preserve integer formatting for count columns when possible
    for column in numeric_columns:
        if column in df.columns and pd.api.types.is_integer_dtype(df[column]):
            total_df[column] = total_df[column].astype(int)
    return pd.concat([df, total_df], ignore_index=True)


def resolve_rate(value: str | None, rates: dict[str, float]) -> float:
    if value is None:
        return 1.0
    normalized = str(value).strip().upper()
    if not normalized or normalized == "NAN":
        return 1.0
    return rates.get(normalized, 1.0)


PARTNER_SUFFIX_PATTERN = re.compile(r"\s*-\s*—Å–≤–æ–¥–Ω[–∞a][^$]*$", re.IGNORECASE)


def infer_partner_program(filename: str) -> str:
    stem = Path(filename).stem
    cleaned = PARTNER_SUFFIX_PATTERN.sub("", stem)
    cleaned = cleaned.strip()
    return cleaned or stem.strip()


def render_reconciliation_module(sidebar: DeltaGenerator) -> None:
    st.subheader("üßæ –°–≤–æ–¥–Ω–∞—è –ø–æ –±–∞–π–µ—Ä–∞–º –∏–∑ —Ñ–∞–π–ª–æ–≤ —Å–≤–µ—Ä–æ–∫")
    st.caption(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ CSV-—Ñ–∞–π–ª–æ–≤ —Å–≤–µ—Ä–æ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ –±–∞–π–µ—Ä–∞–º."
    )

    uploaded_files = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª—ã",
        type=["csv"],
        accept_multiple_files=True,
        key="reconciliation_files",
    )

    if not uploaded_files:
        st.info("–î–æ–±–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ CSV-—Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
        return

    all_details: list[pd.DataFrame] = []
    errors: list[str] = []

    for uploaded in uploaded_files:
        partner_program = infer_partner_program(uploaded.name)
        try:
            details = load_reconciliation_file(uploaded, partner_program, source_name=uploaded.name)
        except Exception as exc:  # pragma: no cover - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            errors.append(f"{uploaded.name}: {exc}")
            continue

        if details.empty:
            errors.append(f"{uploaded.name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ")
            continue

        all_details.append(details)

    if errors:
        st.warning("\n".join(errors))

    if not all_details:
        st.error("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")
        return

    combined_details = pd.concat(all_details, ignore_index=True)
    combined_details["partner_program"] = combined_details["partner_program"].astype(str)
    combined_details["buyer"] = combined_details["buyer"].astype(str)
    combined_details["currency"] = (
        combined_details["currency"].fillna("USD").replace("", "USD").astype(str).str.upper()
    )

    available_currencies = sorted(
        {
            currency
            for currency in combined_details["currency"].unique()
            if isinstance(currency, str) and currency and currency != "NAN"
        }
    )
    if not available_currencies:
        available_currencies = ["USD"]

    sidebar.subheader("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç ‚Üí $")
    sidebar.caption("–í–≤–µ–¥–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–ª–∞—Ä–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 1 –µ–¥–∏–Ω–∏—Ü–µ –≤–∞–ª—é—Ç—ã –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
    exchange_rates: dict[str, float] = {}
    for currency in available_currencies:
        exchange_rates[currency] = sidebar.number_input(
            f"{currency} ‚Üí USD",
            min_value=0.0,
            value=1.0,
            step=0.01,
            format="%.4f",
            key=f"rate_{currency}",
        )

    exchange_rates.setdefault("USD", 1.0)

    partner_options = sorted(combined_details["partner_program"].unique())
    selected_programs = st.multiselect(
        "–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
        options=partner_options,
        default=partner_options,
    )
    filtered_details = combined_details[combined_details["partner_program"].isin(selected_programs)]

    buyer_options = sorted(filtered_details["buyer"].unique())
    selected_buyers = st.multiselect(
        "–ë–∞–π–µ—Ä—ã",
        options=buyer_options,
        default=buyer_options,
    )
    filtered_details = filtered_details[filtered_details["buyer"].isin(selected_buyers)]

    if filtered_details.empty:
        st.warning("–ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    st.subheader("–î–µ—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏")
    st.dataframe(
        filtered_details[
            [
                "partner_program",
                "buyer",
                "commission_type",
                "ftd_count",
                "payout",
                "currency",
                "is_chargeback",
                "source_file",
            ]
        ]
    )

    summary = aggregate_by_partner_and_buyer(filtered_details)
    summary["currency"] = summary["currency"].fillna("USD").replace("", "USD").str.upper()
    summary["conversion_rate"] = summary["currency"].apply(lambda cur: resolve_rate(cur, exchange_rates))
    summary["payout_usd"] = (summary["payout"] * summary["conversion_rate"]).round(2)
    summary["chargeback_amount_usd"] = (
        summary["chargeback_amount"] * summary["conversion_rate"]
    ).round(2)
    summary["net_payout_usd"] = (summary["net_payout"] * summary["conversion_rate"]).round(2)

    st.subheader("–°–≤–æ–¥–∫–∞ –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –∏ –±–∞–π–µ—Ä–∞–º")
    st.dataframe(
        summary[
            [
                "partner_program",
                "buyer",
                "deposits",
                "chargebacks",
                "net_deposits",
                "payout",
                "payout_usd",
                "chargeback_amount",
                "chargeback_amount_usd",
                "net_payout",
                "net_payout_usd",
                "currency",
            ]
        ]
    )
    create_download_button("–°–∫–∞—á–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º", summary, "partner_summary.csv")

    overall = aggregate_overall(summary)
    overall["currency"] = overall["currency"].fillna("USD").replace("", "USD").str.upper()
    overall["conversion_rate"] = overall["currency"].apply(lambda cur: resolve_rate(cur, exchange_rates))
    overall["payout_usd"] = (overall["payout"] * overall["conversion_rate"]).round(2)
    overall["chargeback_amount_usd"] = (
        overall["chargeback_amount"] * overall["conversion_rate"]
    ).round(2)
    overall["net_payout_usd"] = (overall["net_payout"] * overall["conversion_rate"]).round(2)

    st.subheader("–û–±—â–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –±–∞–π–µ—Ä–∞–º")
    st.dataframe(
        overall[
            [
                "buyer",
                "currency",
                "deposits",
                "chargebacks",
                "net_deposits",
                "payout",
                "payout_usd",
                "chargeback_amount",
                "chargeback_amount_usd",
                "net_payout",
                "net_payout_usd",
                "partner_program",
            ]
        ]
    )
    create_download_button("–°–∫–∞—á–∞—Ç—å –æ–±—â—É—é —Å–≤–æ–¥–∫—É", overall, "overall_summary.csv")

    buyer_detail_options = sorted(summary["buyer"].unique())

    if buyer_detail_options:
        st.subheader("–û—Ç—á–µ—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –±–∞–π–µ—Ä—É")
        buyer_for_report = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–π–µ—Ä–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –≤—ã–≥—Ä—É–∑–∫–∏", buyer_detail_options)

        buyer_summary = summary[summary["buyer"] == buyer_for_report].copy()

        if buyer_summary.empty:
            st.info("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
            return

        offers_table = buyer_summary[
            ["partner_program", "deposits", "payout", "payout_usd", "net_payout", "net_payout_usd"]
        ].rename(
            columns={
                "partner_program": "–û—Ñ—Ñ–µ—Ä",
                "deposits": "–î–µ–ø–æ–∑–∏—Ç–æ–≤",
                "payout": "–†–µ–≤–µ–Ω—é –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "payout_usd": "–†–µ–≤–µ–Ω—é –≤ $$",
                "net_payout": "–†–µ–≤–µ–Ω—é (net) –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "net_payout_usd": "–†–µ–≤–µ–Ω—é (net) –≤ $$",
            }
        )
        offers_table["–î–µ–ø–æ–∑–∏—Ç–æ–≤"] = offers_table["–î–µ–ø–æ–∑–∏—Ç–æ–≤"].astype(int)
        offers_table = offers_table[
            [
                "–û—Ñ—Ñ–µ—Ä",
                "–î–µ–ø–æ–∑–∏—Ç–æ–≤",
                "–†–µ–≤–µ–Ω—é –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "–†–µ–≤–µ–Ω—é –≤ $$",
                "–†–µ–≤–µ–Ω—é (net) –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "–†–µ–≤–µ–Ω—é (net) –≤ $$",
            ]
        ]
        offers_table = append_total_row(
            offers_table,
            "–°—É–º–º–∞",
            [
                "–î–µ–ø–æ–∑–∏—Ç–æ–≤",
                "–†–µ–≤–µ–Ω—é –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "–†–µ–≤–µ–Ω—é –≤ $$",
                "–†–µ–≤–µ–Ω—é (net) –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "–†–µ–≤–µ–Ω—é (net) –≤ $$",
            ],
        )

        st.markdown("**–í—ã–ø–ª–∞—Ç—ã**")
        st.dataframe(offers_table)
        create_download_button(
            f"–°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä—É ‚Äî {buyer_for_report}",
            offers_table,
            f"buyer_report_{buyer_for_report}.csv",
        )

        chargebacks_table = buyer_summary[buyer_summary["chargebacks"] > 0][
            ["partner_program", "chargebacks", "chargeback_amount", "chargeback_amount_usd"]
        ].rename(
            columns={
                "partner_program": "–û—Ñ—Ñ–µ—Ä",
                "chargebacks": "–ß–∞—Ä–¥–∂–±–µ–∫–æ–≤",
                "chargeback_amount": "–ß–∞—Ä–¥–∂ –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "chargeback_amount_usd": "–ß–∞—Ä–¥–∂ –≤ $$",
            }
        )

        if not chargebacks_table.empty:
            chargebacks_table["–ß–∞—Ä–¥–∂–±–µ–∫–æ–≤"] = chargebacks_table["–ß–∞—Ä–¥–∂–±–µ–∫–æ–≤"].astype(int)
            chargebacks_table = append_total_row(
                chargebacks_table,
                "–°—É–º–º–∞",
                ["–ß–∞—Ä–¥–∂–±–µ–∫–æ–≤", "–ß–∞—Ä–¥–∂ –≤ –≤–∞–ª—é—Ç–µ –ü–ü", "–ß–∞—Ä–¥–∂ –≤ $$"],
            )

            st.markdown("**–ß–∞—Ä–¥–∂–±–µ–∫–∏**")
            st.dataframe(chargebacks_table)
            create_download_button(
                f"–°–∫–∞—á–∞—Ç—å —á–∞—Ä–¥–∂–±–µ–∫–∏ ‚Äî {buyer_for_report}",
                chargebacks_table,
                f"buyer_chargebacks_{buyer_for_report}.csv",
            )


def render_expenses_module(sidebar: DeltaGenerator) -> None:
    st.subheader("üí∏ –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –ø–æ –±–∞–π–µ—Ä–∞–º")
    st.caption("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ ‚Äî –º–æ–¥—É–ª—å –æ–±—ä–µ–¥–∏–Ω–∏—Ç –±–ª–æ–∫–∏ –∏ –ø–æ—Å—á–∏—Ç–∞–µ—Ç –∏—Ç–æ–≥–∏ –ø–æ –±–∞–π–µ—Ä–∞–º.")

    uploaded_files = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª—ã —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤",
        type=["csv"],
        accept_multiple_files=True,
        key="expenses_files",
    )

    if not uploaded_files:
        st.info("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω CSV-—Ñ–∞–π–ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º.")
        return

    expense_frames: list[pd.DataFrame] = []
    errors: list[str] = []

    for uploaded in uploaded_files:
        try:
            details = load_expenses_file(uploaded, source_name=uploaded.name)
        except Exception as exc:  # pragma: no cover - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            errors.append(f"{uploaded.name}: {exc}")
            continue

        if details.empty:
            errors.append(f"{uploaded.name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ")
            continue

        expense_frames.append(details)

    if errors:
        st.warning("\n".join(errors))

    if not expense_frames:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤.")
        return

    combined = pd.concat(expense_frames, ignore_index=True)
    combined["amount"] = combined["amount"].astype(float).round(2)

    buyer_options = sorted(combined["buyer"].unique())
    selected_buyers = st.multiselect(
        "–ë–∞–π–µ—Ä—ã (—Ä–∞—Å—Ö–æ–¥—ã)",
        options=buyer_options,
        default=buyer_options,
        key="expense_buyers",
    )

    type_options = sorted(combined["expense_type"].unique())
    selected_types = st.multiselect(
        "–¢–∏–ø—ã —Ä–∞—Å—Ö–æ–¥–æ–≤",
        options=type_options,
        default=type_options,
        key="expense_types",
    )

    filtered = combined[
        combined["buyer"].isin(selected_buyers) & combined["expense_type"].isin(selected_types)
    ]

    if filtered.empty:
        st.warning("–ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    detail_display = filtered.rename(
        columns={
            "buyer": "–ë–∞–π–µ—Ä",
            "expense_type": "–¢–∏–ø —Ä–∞—Å—Ö–æ–¥–∞",
            "item_count": "–ö–æ–ª-–≤–æ",
            "amount": "–°—É–º–º–∞, $",
            "source_file": "–ò—Å—Ç–æ—á–Ω–∏–∫",
            "notes": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
        }
    )

    st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤")
    st.dataframe(detail_display, use_container_width=True)
    create_download_button("–°–∫–∞—á–∞—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤", detail_display, "expenses_details.csv")

    by_type = aggregate_expenses_by_buyer(filtered)
    by_type_display = by_type.rename(
        columns={
            "buyer": "–ë–∞–π–µ—Ä",
            "expense_type": "–¢–∏–ø —Ä–∞—Å—Ö–æ–¥–∞",
            "item_count": "–ö–æ–ª-–≤–æ",
            "amount": "–°—É–º–º–∞, $",
        }
    )
    st.subheader("–°–≤–æ–¥–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ä–∞—Å—Ö–æ–¥–æ–≤")
    st.dataframe(by_type_display, use_container_width=True)
    create_download_button("–°–∫–∞—á–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Ç–∏–ø–∞–º", by_type_display, "expenses_by_type.csv")

    totals = aggregate_expenses_totals(filtered)
    totals_display = totals.rename(
        columns={
            "buyer": "–ë–∞–π–µ—Ä",
            "total_amount": "–í—Å–µ–≥–æ, $",
            "total_items": "–ö–æ–ª-–≤–æ –ø–æ–∑–∏—Ü–∏–π",
            "expense_types": "–¢–∏–ø–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤",
            "entries": "–°—Ç—Ä–æ–∫",
        }
    )

    numeric_columns = ["–í—Å–µ–≥–æ, $", "–ö–æ–ª-–≤–æ –ø–æ–∑–∏—Ü–∏–π", "–¢–∏–ø–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤", "–°—Ç—Ä–æ–∫"]
    for column in numeric_columns[1:]:
        if column in totals_display.columns:
            totals_display[column] = totals_display[column].astype(int)
    totals_display["–í—Å–µ–≥–æ, $"] = totals_display["–í—Å–µ–≥–æ, $"].round(2)
    totals_display = append_total_row(totals_display, "–°—É–º–º–∞", numeric_columns)

    st.subheader("–ò—Ç–æ–≥–æ –ø–æ –±–∞–π–µ—Ä–∞–º")
    st.dataframe(totals_display, use_container_width=True)
    create_download_button("–°–∫–∞—á–∞—Ç—å –∏—Ç–æ–≥–∏ –ø–æ –±–∞–π–µ—Ä–∞–º", totals_display, "expenses_totals.csv")

    sidebar.subheader("–ë—ã—Å—Ç—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    total_spent = filtered["amount"].sum()
    unique_buyers = filtered["buyer"].nunique()
    sidebar.metric("–†–∞—Å—Ö–æ–¥–æ–≤ –≤—Å–µ–≥–æ, $", f"{total_spent:,.2f}")
    sidebar.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–π–µ—Ä–æ–≤", unique_buyers)

    buyer_expense_options = sorted(filtered["buyer"].unique())
    if buyer_expense_options:
        st.subheader("–û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞")
        buyer_for_expenses = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–π–µ—Ä–∞ (—Ä–∞—Å—Ö–æ–¥—ã)",
            options=buyer_expense_options,
            key="expense_buyer_report",
        )

        buyer_expenses = filtered[filtered["buyer"] == buyer_for_expenses].copy()

        if buyer_expenses.empty:
            st.info("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
        else:
            buyer_detail = buyer_expenses.rename(
                columns={
                    "expense_type": "–¢–∏–ø —Ä–∞—Å—Ö–æ–¥–∞",
                    "item_count": "–ö–æ–ª-–≤–æ",
                    "amount": "–°—É–º–º–∞, $",
                    "notes": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                    "source_file": "–ò—Å—Ç–æ—á–Ω–∏–∫",
                }
            )[
                ["–¢–∏–ø —Ä–∞—Å—Ö–æ–¥–∞", "–ö–æ–ª-–≤–æ", "–°—É–º–º–∞, $", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ò—Å—Ç–æ—á–Ω–∏–∫"]
            ]
            buyer_detail = append_total_row(buyer_detail, "–°—É–º–º–∞", ["–ö–æ–ª-–≤–æ", "–°—É–º–º–∞, $"])

            st.dataframe(buyer_detail, use_container_width=True)
            create_download_button(
                f"–°–∫–∞—á–∞—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫ ‚Äî {buyer_for_expenses}",
                buyer_detail,
                f"expenses_{buyer_for_expenses}.csv",
            )

st.set_page_config(page_title="ZP Calculator", layout="wide")

sidebar = st.sidebar
module = sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å", ["–°–≤–µ—Ä–∫–∏", "–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏"], index=0)

if module == "–°–≤–µ—Ä–∫–∏":
    sidebar.header("–ü—Ä–∞–≤–∏–ª–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–≤–µ—Ä–æ–∫")
    sidebar.markdown(
        """
        * –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV (UTF-8).
        * –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: **Buyer**, **Commision/Commission Type**, **FTD Count**, **Payout**.
        * –°—Ç—Ä–æ–∫–∏ "–í—Å–µ–≥–æ" –∏ "–ò—Ç–æ–≥–æ" –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è ‚Äî –∏—Ç–æ–≥ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        """
    )
    st.title("ZP Calculator ‚Äî –°–≤–µ—Ä–∫–∏")
    render_reconciliation_module(sidebar)
else:
    sidebar.header("–ü—Ä–∞–≤–∏–ª–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤")
    sidebar.markdown(
        """
        * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –≤ CSV (UTF-8, –±–µ–∑ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö —è—á–µ–µ–∫).
        * –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ "–ë–∞–π–µ—Ä", "–ö–æ–ª-–≤–æ", "–°—É–º–º–∞" –ø–æ —Ç–∏–ø—É —Ä–∞—Å—Ö–æ–¥–∞.
        * –°—Ç—Ä–æ–∫–∏ "–ò—Ç–æ–≥–æ" –∏ "–í—Å–µ–≥–æ" –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        """
    )
    st.title("ZP Calculator ‚Äî –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏")
    render_expenses_module(sidebar)
