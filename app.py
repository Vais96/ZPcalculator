from __future__ import annotations

import re
from io import BytesIO
from pathlib import Path

import pandas as pd
import streamlit as st

from zp_calculator.data_processing import (
    aggregate_by_partner_and_buyer,
    aggregate_overall,
    load_reconciliation_file,
)


def create_download_button(label: str, df: pd.DataFrame, filename: str) -> None:
    csv_buffer = BytesIO()
    df.to_csv(csv_buffer, index=False, encoding="utf-8-sig")
    csv_buffer.seek(0)
    st.download_button(
        label=label,
        data=csv_buffer,
        file_name=filename,
        mime="text/csv",
    )


def append_total_row(df: pd.DataFrame, label: str, numeric_columns: list[str]) -> pd.DataFrame:
    if df.empty:
        return df

    total = {column: df[column].sum() if column in numeric_columns else "" for column in df.columns}
    first_column = df.columns[0]
    total[first_column] = label
    total_df = pd.DataFrame([total])
    # Preserve integer formatting for count columns when possible
    for column in numeric_columns:
        if column in df.columns and pd.api.types.is_integer_dtype(df[column]):
            total_df[column] = total_df[column].astype(int)
    return pd.concat([df, total_df], ignore_index=True)


def resolve_rate(value: str | None, rates: dict[str, float]) -> float:
    if value is None:
        return 1.0
    normalized = str(value).strip().upper()
    if not normalized or normalized == "NAN":
        return 1.0
    return rates.get(normalized, 1.0)


PARTNER_SUFFIX_PATTERN = re.compile(r"\s*-\s*—Å–≤–æ–¥–Ω[–∞a][^$]*$", re.IGNORECASE)


def infer_partner_program(filename: str) -> str:
    stem = Path(filename).stem
    cleaned = PARTNER_SUFFIX_PATTERN.sub("", stem)
    cleaned = cleaned.strip()
    return cleaned or stem.strip()

st.set_page_config(
    page_title="ZP Calculator",
    layout="wide",
)

st.title("üßæ –°–≤–æ–¥–Ω–∞—è –ø–æ –±–∞–π–µ—Ä–∞–º –∏–∑ —Ñ–∞–π–ª–æ–≤ —Å–≤–µ—Ä–æ–∫")
st.caption(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ CSV-—Ñ–∞–π–ª–æ–≤ —Å–≤–µ—Ä–æ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ –±–∞–π–µ—Ä–∞–º."
)

with st.sidebar:
    st.header("–ü—Ä–∞–≤–∏–ª–∞ –∏–º–ø–æ—Ä—Ç–∞")
    st.markdown(
        """
        * –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV (UTF-8).
        * –ò–∑ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–ª–æ–Ω–∫–∏ **Buyer**, **Commision/Commission Type**, **–°—É–º–º–∞ –ø–æ –ø–æ–ª—é FTD Count**, **–°—É–º–º–∞ –ø–æ –ø–æ–ª—é Payout**.
        * "–í—Å–µ–≥–æ" –∏ "–ò—Ç–æ–≥–æ" —Å—Ç—Ä–æ–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è ‚Äî totals —Å—á–∏—Ç–∞—é—Ç—Å—è –∑–∞–Ω–æ–≤–æ.
        """
    )

uploaded_files = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª—ã", type=["csv"], accept_multiple_files=True
)

if not uploaded_files:
    st.info("–î–æ–±–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ CSV-—Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
    st.stop()

all_details: list[pd.DataFrame] = []
errors: list[str] = []

for uploaded in uploaded_files:
    partner_program = infer_partner_program(uploaded.name)
    try:
        details = load_reconciliation_file(uploaded, partner_program, source_name=uploaded.name)
    except Exception as exc:  # pragma: no cover - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        errors.append(f"{uploaded.name}: {exc}")
        continue

    if details.empty:
        errors.append(f"{uploaded.name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ")
        continue

    all_details.append(details)

if errors:
    st.warning("\n".join(errors))

if not all_details:
    st.error("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")
    st.stop()

combined_details = pd.concat(all_details, ignore_index=True)
combined_details["partner_program"] = combined_details["partner_program"].astype(str)
combined_details["buyer"] = combined_details["buyer"].astype(str)
combined_details["currency"] = (
    combined_details["currency"].fillna("USD").replace("", "USD").astype(str).str.upper()
)

available_currencies = sorted(
    {
        currency
        for currency in combined_details["currency"].unique()
        if isinstance(currency, str) and currency and currency != "NAN"
    }
)
if not available_currencies:
    available_currencies = ["USD"]

st.sidebar.subheader("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç ‚Üí $")
st.sidebar.caption("–í–≤–µ–¥–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–ª–∞—Ä–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 1 –µ–¥–∏–Ω–∏—Ü–µ –≤–∞–ª—é—Ç—ã –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
exchange_rates: dict[str, float] = {}
for currency in available_currencies:
    default_rate = 1.0 if currency == "USD" else 1.0
    exchange_rates[currency] = st.sidebar.number_input(
        f"{currency} ‚Üí USD",
        min_value=0.0,
        value=float(default_rate),
        step=0.01,
        format="%.4f",
        key=f"rate_{currency}",
    )

exchange_rates.setdefault("USD", 1.0)

partner_options = sorted(combined_details["partner_program"].unique())
selected_programs = st.multiselect(
    "–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
    options=partner_options,
    default=partner_options,
)
filtered_details = combined_details[combined_details["partner_program"].isin(selected_programs)]

buyer_options = sorted(filtered_details["buyer"].unique())
selected_buyers = st.multiselect(
    "–ë–∞–π–µ—Ä—ã",
    options=buyer_options,
    default=buyer_options,
)
filtered_details = filtered_details[filtered_details["buyer"].isin(selected_buyers)]

if filtered_details.empty:
    st.warning("–ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
    st.stop()

st.subheader("–î–µ—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏")
st.dataframe(
    filtered_details[
        [
            "partner_program",
            "buyer",
            "commission_type",
            "ftd_count",
            "payout",
            "currency",
            "is_chargeback",
            "source_file",
        ]
    ]
)

summary = aggregate_by_partner_and_buyer(filtered_details)
summary["currency"] = summary["currency"].fillna("USD").replace("", "USD").str.upper()
summary["conversion_rate"] = summary["currency"].apply(lambda cur: resolve_rate(cur, exchange_rates))
summary["payout_usd"] = (summary["payout"] * summary["conversion_rate"]).round(2)
summary["chargeback_amount_usd"] = (
    summary["chargeback_amount"] * summary["conversion_rate"]
).round(2)
summary["net_payout_usd"] = (summary["net_payout"] * summary["conversion_rate"]).round(2)

st.subheader("–°–≤–æ–¥–∫–∞ –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –∏ –±–∞–π–µ—Ä–∞–º")
st.dataframe(
    summary[
        [
            "partner_program",
            "buyer",
            "deposits",
            "chargebacks",
            "net_deposits",
            "payout",
            "payout_usd",
            "chargeback_amount",
            "chargeback_amount_usd",
            "net_payout",
            "net_payout_usd",
            "currency",
        ]
    ]
)
create_download_button("–°–∫–∞—á–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º", summary, "partner_summary.csv")

overall = aggregate_overall(summary)
overall["currency"] = overall["currency"].fillna("USD").replace("", "USD").str.upper()
overall["conversion_rate"] = overall["currency"].apply(lambda cur: resolve_rate(cur, exchange_rates))
overall["payout_usd"] = (overall["payout"] * overall["conversion_rate"]).round(2)
overall["chargeback_amount_usd"] = (
    overall["chargeback_amount"] * overall["conversion_rate"]
).round(2)
overall["net_payout_usd"] = (overall["net_payout"] * overall["conversion_rate"]).round(2)

st.subheader("–û–±—â–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –±–∞–π–µ—Ä–∞–º")
st.dataframe(
    overall[
        [
            "buyer",
            "currency",
            "deposits",
            "chargebacks",
            "net_deposits",
            "payout",
            "payout_usd",
            "chargeback_amount",
            "chargeback_amount_usd",
            "net_payout",
            "net_payout_usd",
            "partner_program",
        ]
    ]
)
create_download_button("–°–∫–∞—á–∞—Ç—å –æ–±—â—É—é —Å–≤–æ–¥–∫—É", overall, "overall_summary.csv")

buyer_detail_options = sorted(summary["buyer"].unique())

if buyer_detail_options:
    st.subheader("–û—Ç—á–µ—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –±–∞–π–µ—Ä—É")
    buyer_for_report = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–π–µ—Ä–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –≤—ã–≥—Ä—É–∑–∫–∏", buyer_detail_options)

    buyer_summary = summary[summary["buyer"] == buyer_for_report].copy()

    if buyer_summary.empty:
        st.info("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–π–µ—Ä–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
    else:
        offers_table = buyer_summary[
            ["partner_program", "deposits", "payout", "payout_usd", "net_payout", "net_payout_usd"]
        ].rename(
            columns={
                "partner_program": "–û—Ñ—Ñ–µ—Ä",
                "deposits": "–î–µ–ø–æ–∑–∏—Ç–æ–≤",
                "payout": "–†–µ–≤–µ–Ω—é –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "payout_usd": "–†–µ–≤–µ–Ω—é –≤ $$",
                "net_payout": "–†–µ–≤–µ–Ω—é (net) –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "net_payout_usd": "–†–µ–≤–µ–Ω—é (net) –≤ $$",
            }
        )
        offers_table["–î–µ–ø–æ–∑–∏—Ç–æ–≤"] = offers_table["–î–µ–ø–æ–∑–∏—Ç–æ–≤"].astype(int)
        offers_table = offers_table[
            [
                "–û—Ñ—Ñ–µ—Ä",
                "–î–µ–ø–æ–∑–∏—Ç–æ–≤",
                "–†–µ–≤–µ–Ω—é –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "–†–µ–≤–µ–Ω—é –≤ $$",
                "–†–µ–≤–µ–Ω—é (net) –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "–†–µ–≤–µ–Ω—é (net) –≤ $$",
            ]
        ]
        offers_table = append_total_row(
            offers_table,
            "–°—É–º–º–∞",
            [
                "–î–µ–ø–æ–∑–∏—Ç–æ–≤",
                "–†–µ–≤–µ–Ω—é –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "–†–µ–≤–µ–Ω—é –≤ $$",
                "–†–µ–≤–µ–Ω—é (net) –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "–†–µ–≤–µ–Ω—é (net) –≤ $$",
            ],
        )

        st.markdown("**–í—ã–ø–ª–∞—Ç—ã**")
        st.dataframe(offers_table)
        create_download_button(
            f"–°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –±–∞–π–µ—Ä—É ‚Äî {buyer_for_report}",
            offers_table,
            f"buyer_report_{buyer_for_report}.csv",
        )

        chargebacks_table = buyer_summary[buyer_summary["chargebacks"] > 0][
            ["partner_program", "chargebacks", "chargeback_amount", "chargeback_amount_usd"]
        ].rename(
            columns={
                "partner_program": "–û—Ñ—Ñ–µ—Ä",
                "chargebacks": "–ß–∞—Ä–¥–∂–±–µ–∫–æ–≤",
                "chargeback_amount": "–ß–∞—Ä–¥–∂ –≤ –≤–∞–ª—é—Ç–µ –ü–ü",
                "chargeback_amount_usd": "–ß–∞—Ä–¥–∂ –≤ $$",
            }
        )

        if not chargebacks_table.empty:
            chargebacks_table["–ß–∞—Ä–¥–∂–±–µ–∫–æ–≤"] = chargebacks_table["–ß–∞—Ä–¥–∂–±–µ–∫–æ–≤"].astype(int)
            chargebacks_table = append_total_row(
                chargebacks_table,
                "–°—É–º–º–∞",
                ["–ß–∞—Ä–¥–∂–±–µ–∫–æ–≤", "–ß–∞—Ä–¥–∂ –≤ –≤–∞–ª—é—Ç–µ –ü–ü", "–ß–∞—Ä–¥–∂ –≤ $$"],
            )

            st.markdown("**–ß–∞—Ä–¥–∂–±–µ–∫–∏**")
            st.dataframe(chargebacks_table)
            create_download_button(
                f"–°–∫–∞—á–∞—Ç—å —á–∞—Ä–¥–∂–±–µ–∫–∏ ‚Äî {buyer_for_report}",
                chargebacks_table,
                f"buyer_chargebacks_{buyer_for_report}.csv",
            )
